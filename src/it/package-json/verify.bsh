/*
 * Copyright 2013 Peter Janes (peterjanes)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
import java.io.File;
import java.util.HashMap;
import java.util.Map;

import org.codehaus.plexus.util.FileUtils;
import org.json.simple.*;

File packageJson = new File(basedir, "target/classes/package.json");
if (!packageJson.isFile()) {
    throw new Exception("package.json was not created");
}
String jsonString = FileUtils.fileRead(packageJson);
JSONObject obj = JSONValue.parse(jsonString);

/*
          <npmDependencies>dep1,dep2@1.0,/tmp/dep3.tgz</npmDependencies>
          <npmTestDependencies>test1,test2@1.0,/tmp/test3.tgz</npmTestDependencies>
*/

Map expectedDependencies = new HashMap();
expectedDependencies.put("bar", "1.2-SNAPSHOT");
//expectedDependencies.put("dep1", null);
expectedDependencies.put("dep2", "1.0");
expectedDependencies.put("dep3", ">=1.0");
//expectedDependencies.put("dep4", "[1.0,1.1.x]");
//expectedDependencies.put("/tmp/dep5.tgz", null);
JSONObject dependencies = obj.get("dependencies");

if ("[1.0".equals(dependencies.get("dep4"))) {
    throw new Exception("Version range not parsed properly");
}
Map expectedDevDependencies = new HashMap();
expectedDevDependencies.put("test-dependency", "1.1");
//expectedDevDependencies.put("test1", null);
expectedDevDependencies.put("test2", "1.0");
//expectedDevDependencies.put("/tmp/test3.tgz", null);
JSONObject devDependencies = obj.get("devDependencies");

check(map, expectedMap) {
    for (String key : expectedMap.keySet()) {
        String depVersion = map.get(key);
        if (null == depVersion) {
            throw new Exception("'" + key + "' not found");
        }
        if (!expectedMap.get(key).equals(depVersion)) {
            throw new Exception("Wrong version of '" + key + "': " + depVersion);
        }
    }
}

check(dependencies, expectedDependencies);
check(devDependencies, expectedDevDependencies);

return true;

